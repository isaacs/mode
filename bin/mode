#!/usr/bin/env node --
var path = require('path'),
    fs = require('fs'),
    sys = require('sys');
require.paths.unshift(path.join(__dirname, '../lib'));
var git = require('git'),
    cli = require('cli'),
    mode = require('mode');

require('fs-additions')

mode.baseDir = path.dirname(__dirname);

var program = new cli.Program([
  'Usage: mode [global options] <command> [command options]',
  'Global options:',
	['quiet',    'Suppress all messages except errors.'],
	['verbose',  'Print details.'],
	['help',  'Show this help message.'],
]);

// helpers
program.mkModuleQuery = function (names, options, moduleIsOptional) {
  if (names.length === 0) {
    if (moduleIsOptional)
      return;
    require('trollop').p.educate('Error: missing module name');
    process.exit(1);
    return;
  }
  // module regexp
  var regsrc = [], query;
  for (var i=0;i<names.length;i++) {
    var name = names[i];
    regsrc.push('(?:^|\\/)'+name.replace(/([^a-zA-Z0-9_-])/,'\\$1')+'\.js$');
  }
  try {
    query = new RegExp(regsrc.join('|'), 
      (options && options.case_sensitive) ? '':'i');
    //sys.error(query)
  }
  catch(e) {
    this.exit(1, 'Error: malformed module name(s) '+
                 names.map(sys.inspect).join(', '));
  }
  return query;
}

program.cmd.version = {
  main: function(){
    git.describe(function(err, stdout, stderr) {
      if (err) this.exit(err);
      this.exit('mode '+stdout.trim());
    });
  },
  desc: 'Print version of mode and exit'
}

program.cmd.update = {
  main: function() {
    var args = ['pull', 'origin', 'master'];
    if (!this.options.verbose) args.push('--quiet');
    git.exec(args, {buffered:false}, function(err, o, e) {
      if (err) this.exit(err);
    });
  },
  desc: 'Update the module index.'
}

program.cmd.search = require('./mode-search');
program.cmd.install = require('./mode-install');
program.cmd.activate = require('./mode-activate');

program.main(function(){
  // set GIT_DIR to our basedir
  git.context = this; // execute git callbacks in the program
})
